<?php
/*******************************************************************************
	PostgreSQL用DB関数
																Fellow System
--------------------------------------------------------------------------------
 No.│   日付   │区分│                        内  容
━━┿━━━━━┿━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 001│2009.09.02│新規│[V1.00] 金井
 002│2015.03.17│追加│[V1.00] 越智　db_connectのパラメータに char 追加
*******************************************************************************/

/*******************************************************************************
	DB接続
--------------------------------------------------------------------------------
	$db = db_connect($info);
--------------------------------------------------------------------------------
	$db					DB接続リソース
	$info				DB接続情報
		conn				接続情報文字列
			db					DB名
			host				ホスト名
			user				ユーザ名
			pswd				パスワード
			char				キャラクタ・セット									// 002 追加
		error				エラー処理関数　func($msg, $sql)
								$msg	メッセージ
								$sql	SQL文
--------------------------------------------------------------------------------
　DBに接続してDB接続リソースを返す。
*******************************************************************************/
function db_connect($info)
{
	// エラー処理関数を調整
	if(empty($info['error'])) {
		$info['error'] = 'db_dummy';
	}

	// DBに接続
	$conn = $info['conn'];
	$temp = ($conn['db'] ? "dbname={$conn['db']}" : NULL);
	$temp .= ($conn['host'] ? " host={$conn['host']}" : NULL);
	$temp .= ($conn['user'] ? " user={$conn['user']}" : NULL);
	$temp .= ($conn['pswd'] ? " password={$conn['pswd']}" : NULL);
	$db = pg_connect($temp);

	// 異常ならエラーを通知して終了
	if(!$db) {
		$info['error']('データベースに接続できませんでした。');
		return(NULL);
	}
	
	// キャラクタ・セットを設定														// 002 --> 追加
	if(isset($conn['char'])) {
		$sql = "set client_encoding = '{$conn['char']}'";
		$res = pg_query($db, $sql);
		if(!$res) {
			$info['error']('キャラクタ・セットを設定できませんでした。');
			return(NULL);
		}
	}																				// 002 <--

	// DB状態を更新
	db_status($db, 'conn' , $info['conn']);
	db_status($db, 'error', $info['error']);
	db_status($db, 'begin', FALSE);

	// DB接続リソースを返す
	return($db);
}

/*******************************************************************************
	DB切断
--------------------------------------------------------------------------------
	$ok = db_close($db);
--------------------------------------------------------------------------------
	$ok					正常終了状態
	$db					DB接続リソース
--------------------------------------------------------------------------------
　DB接続をクローズする。
*******************************************************************************/
function db_close($db)
{
	// DB接続をクローズ
	$ok = pg_close($db);

	// 正常終了状態を返す
	return($ok);
}

/*******************************************************************************
	ダミー関数
--------------------------------------------------------------------------------
	db_dummy();
--------------------------------------------------------------------------------
　何もしない。
*******************************************************************************/
function db_dummy()
{
}

/*******************************************************************************
	トランザクション開始
--------------------------------------------------------------------------------
	$ok = db_begin($db);
--------------------------------------------------------------------------------
	$ok					正常終了状態
	$db					DB接続リソース
--------------------------------------------------------------------------------
　トランザクションを開始する。
　異常が発生した場合、エラー情報を出力して終了する。
*******************************************************************************/
function db_begin($db)
{
	// トランザクション開始
	$res = pg_query($db, 'begin');

	// 正常終了であれば、トランザクション開始状態に移行
	if($res) {
		$ok = TRUE;
		db_status($db, 'begin', TRUE);
	}

	// 異常終了なので、エラー情報を出力して終了
	else {
		$ok = FALSE;
		$error = db_status($db, 'error');
		$error('トランザクションを開始できませんでした。');
	}

	// 正常終了状態を返す
	return($ok);
}

/*******************************************************************************
	コミット
--------------------------------------------------------------------------------
	db_commit($db);
--------------------------------------------------------------------------------
	$db					DB接続リソース
--------------------------------------------------------------------------------
　コミットする。
*******************************************************************************/
function db_commit($db)
{
	// コミット
	pg_query($db, 'commit');

	// トランザクション開始状態を解除
	db_status($db, 'begin', FALSE);
}

/*******************************************************************************
	テーブル・ロック
--------------------------------------------------------------------------------
	db_lock($db, $tables);
--------------------------------------------------------------------------------
	$db					DB接続リソース
	$tables				テーブル名(カンマ区切りで複数テーブル指定)
--------------------------------------------------------------------------------
　テーブルをロックする。
*******************************************************************************/
function db_lock($db, $tables)
{
	// テーブルをロック
	$sql = "lock table {$tables} in share mode";
	if(!pg_query($db, $sql)) {
		$error = db_status($db, 'error');
		$error('テーブルがロックできませんでした。');
	}
}

/*******************************************************************************
	ロールバック
--------------------------------------------------------------------------------
	db_rollback($db);
--------------------------------------------------------------------------------
	$db					DB接続リソース
--------------------------------------------------------------------------------
　ロールバックする。
*******************************************************************************/
function db_rollback($db=NULL)
{
	// ロールバック(全更新を破棄)
	// トランザクション開始状態を解除
	$dbs = ($db === NULL ? array_keys(db_status()) : array($db));
	foreach($dbs as $db) {
		if($db) {
			pg_query($db, 'rollback');
			db_status($db, 'begin', FALSE);
		}
	}
}

/*******************************************************************************
	エラー文字列取得
--------------------------------------------------------------------------------
	$str = db_error();
--------------------------------------------------------------------------------
	$str				エラー文字列
--------------------------------------------------------------------------------
　直近のエラー・メッセージ文字列を取得して返す。
*******************************************************************************/
function db_error()
{
	// エラー・メッセージ文字列を取得
	$str = pg_last_error();

	// 結果を返す
	return($str);
}

/*******************************************************************************
	文字列エスケープ
--------------------------------------------------------------------------------
	$str = db_escape_string($str);
--------------------------------------------------------------------------------
	$str				文字列
--------------------------------------------------------------------------------
　文字列をエスケープして返す。
*******************************************************************************/
function db_escape_string($str)
{
	// 文字列をエスケープ
	$str = pg_escape_string($str);

	// 結果を返す
	return($str);
}

/*******************************************************************************
	クエリ実行
--------------------------------------------------------------------------------
	$res = db_query($db, $sql);
--------------------------------------------------------------------------------
	$res				リソース
	$db					DB接続リソース
	$sql				SQL文
--------------------------------------------------------------------------------
　SQL文を実行してその結果を返す。
*******************************************************************************/
function db_query($db, $sql)
{
	// SQL文を実行
	$res = pg_query($db, $sql);
	if(!$res) {
		$error = db_status($db, 'error');
		$error('クエリが実行できませんでした。', $sql);
	}

	// 結果を返す
	return($res);
}

/*******************************************************************************
	DBデータ取得
--------------------------------------------------------------------------------
	$rows = db_get_data($data, $db, $sql);
--------------------------------------------------------------------------------
	$rows				行数
	$data				検索データ(参照渡し)
	$db					DB接続リソース
	$sql				SQL文
--------------------------------------------------------------------------------
　SQL文を実行し、検索データとその行数を返す。
*******************************************************************************/
function db_get_data(&$data, $db, $sql)
{
	// SQL文を実行
	$res = pg_query($db, $sql);

	// 異常ならエラーを通知して終了
	if(!$res) {
		$error = db_status($db, 'error');
		$error('クエリが実行できませんでした。', $sql);
		return(0);
	}

	// 検索データをフェッチしてセット
	$rows = pg_num_rows($res);
	$data = pg_fetch_all($res);

	// 行数を返す
	return($rows);
}

/*******************************************************************************
	DB状態参照/更新
--------------------------------------------------------------------------------
	$status = db_status($db, $name, $status);
--------------------------------------------------------------------------------
	$status				DB状態
	$db					DB接続リソース
	$name				DB状態名
	$status				DB状態
--------------------------------------------------------------------------------
　DB状態を参照または更新する。

　DB状態がNULLでなければ、DB状態を更新してDB状態を返す。
　DB状態がNULLであれば、DB状態を返す。
*******************************************************************************/
function db_status($db=0, $name=0, $status=NULL)
{
	static $StsDB = array();

	// DB状態が未定義であれば初期化
	if(!isset($StsDB[$db])) {
		$StsDB[$db] = array();
	}

	// DB状態がNULL
	if($status === NULL) {

		// DB状態を参照
		if($db === 0) {
			$status = $StsDB;
		}
		else {
			$status = @$StsDB[$db][$name];
		}
	}

	// DB状態はNULLでない
	else {

		// DB状態を設定
		$StsDB[$db][$name] = $status;
	}

	// DB状態を返す
	return($status);
}
?>
